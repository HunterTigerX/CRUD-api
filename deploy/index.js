(()=>{"use strict";const e=require("http"),t=require("path"),n=require("cluster"),s=require("os"),i={_:[]};async function a(){const e={id:"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){let t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))};return Promise.resolve(e)}async function o(e){return Promise.resolve(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/.test(e))}const r=process.argv.slice(2,3).toString().split("=")[1],d=Number("single"===r?"3000":"4000"),p="localhost",l=s.availableParallelism(),c=t.sep;let y=0;const u=[],f=JSON.stringify({message:"Invalid userId (not in uuid format)"}),g=JSON.stringify({message:"Invalid data in request. Probably you are using invalid data type for object key's value"}),H=JSON.stringify({message:"Your body might contain errors and cannot be converted to JSON"}),w=JSON.stringify({message:"Request body does not contain required fields or have extra fields"}),h=JSON.stringify({message:"Your url does not contain user ID"}),m=JSON.stringify({message:"User with this ID was not found"}),x=JSON.stringify({message:"Resource that you requested doesn't exist"}),j=JSON.stringify({message:"Your body is missing required fields"}),T=JSON.stringify({message:"Resource that you requested doesn't exist. You should post to localhost:3000/api/users/"}),v=async function(e,n){let s="";async function r(e){try{return JSON.parse(e),Promise.resolve(JSON.parse(e))}catch(e){return Promise.resolve("Invalid body")}}async function d(e){const t=["username","age","hobbies"],n=Object.keys(e);return Promise.resolve(n.length===t.length&&n.every((e=>t.includes(e))))}async function p(e){let t=e.username,n=e.age,s=e.hobbies;"string"==typeof n&&(n=n.trim()),"string"==typeof t&&(t=t.trim());let i="string"==typeof t&&isNaN(t)&&0!==t.length,a=!isNaN(n)&&null!==n&&0!==n.length,o=Array.isArray(s)&&(s.every((e=>"string"==typeof e))||0===s.length);return Promise.resolve(i&&a&&o)}await new Promise(((t,n)=>{e.on("data",(e=>{s+=e})),e.on("end",(()=>{t()}))}));const l=e.method,y=t.normalize(e.url).split(c);""===y[y.length-1]&&y.pop();let u=y.length>=4?y[3]:void 0,v="api"===y[1]&&"users"===y[2];const C=3===y.length;if(y.length>4)n.setHeader("Content-Type","application/json"),n.writeHead(404),n.end(x);else if("GET"===l)if(v&&C)n.setHeader("Content-Type","application/json"),n.writeHead(200),n.end(JSON.stringify(i._));else if(v&&u)if(await o(u)){const e=i._.find((e=>e.id===u));e?(n.setHeader("Content-Type","application/json"),n.writeHead(200),n.end(JSON.stringify(e))):(n.setHeader("Content-Type","application/json"),n.writeHead(404),n.end(m))}else n.setHeader("Content-Type","application/json"),n.writeHead(400),n.end(f);else n.setHeader("Content-Type","application/json"),n.writeHead(404),n.end(x);else if("POST"===l)if(v&&C){const e=await r(s);if("Invalid body"===e)n.setHeader("Content-Type","application/json"),n.writeHead(500),n.end(H);else if(await d(e))if(!1===await p(e))n.setHeader("Content-Type","application/json"),n.writeHead(500),n.end(g);else{let t=await a();const s=i._.find((e=>e.id===t));for(;s;)t=await a();e.age=Number(e.age);const o=Object.assign(t,e);i._.push(o),n.setHeader("Content-Type","application/json"),n.writeHead(201),n.end(JSON.stringify(o))}else n.setHeader("Content-Type","application/json"),n.writeHead(400),n.end(j)}else n.setHeader("Content-Type","application/json"),n.writeHead(404),n.end(T);else if("PUT"===l)if(v&&C)n.setHeader("Content-Type","application/json"),n.writeHead(400),n.end(h);else if(v&&u)if(await o(u)){const e=i._.find((e=>e.id===u));if(e){const t=await r(s);if("Invalid body"===t)n.setHeader("Content-Type","application/json"),n.writeHead(500),n.end(H);else if(await d(t))if(!1===await p(t))n.setHeader("Content-Type","application/json"),n.writeHead(500),n.end(g);else{const s={id:e.id},a=Object.assign(s,t);i._.map(((e,t)=>{e.id===u&&(i._[t]=a)})),n.setHeader("Content-Type","application/json"),n.writeHead(200),n.end(JSON.stringify(a))}else n.setHeader("Content-Type","application/json"),n.writeHead(400),n.end(w)}else n.setHeader("Content-Type","application/json"),n.writeHead(404),n.end(m)}else n.setHeader("Content-Type","application/json"),n.writeHead(400),n.end(f);else n.setHeader("Content-Type","application/json"),n.writeHead(404),n.end(T);else"DELETE"===l?v&&C?(n.setHeader("Content-Type","application/json"),n.writeHead(400),n.end(h)):v&&u?await o(u)?i._.find((e=>e.id===u))?(i._.map(((e,t)=>{e.id===u&&i._.splice(t,1)})),n.setHeader("Content-Type","application/json"),n.writeHead(204),n.end()):(n.setHeader("Content-Type","application/json"),n.writeHead(404),n.end(m)):(n.setHeader("Content-Type","application/json"),n.writeHead(400),n.end(f)):(n.setHeader("Content-Type","application/json"),n.writeHead(404),n.end(T)):(n.setHeader("Content-Type","application/json"),n.writeHead(404),n.end(x))};if(n.isPrimary&&4e3===d){for(let S=0;S<l;S+=1){const N=n.fork();N.on("online",(()=>{u.push(N)})),N.on("exit",((e,t,n)=>{const s=u.indexOf(e);-1!==s&&u.splice(s,1)}))}const C=e.createServer(v);C.on("request",((t,n)=>{const s=new URL(`http://${p}:${d}${t.url}`).pathname,i=u[y];y=(y+1)%u.length;const a={hostname:"localhost",port:d+i.id-1,path:s,method:t.method,headers:t.headers},o=e.request(a,(e=>{e.pipe(n)}));t.pipe(o)})),C.listen(d,(()=>{console.log(`Server is running on http://${p}:${d} and worker ${process.pid} is working`)}))}else{const b=e.createServer(v);if(4e3===d){process.on("message",(e=>{"request"===e.type&&e.req.pipe(e.res)})),process.send({type:"ready"}),1!==n.worker.id&&b.listen(d+n.worker.id-1,(()=>{console.log(`Server is running on http://${p}:${d+n.worker.id-1} and worker ${process.pid} is working`)})),process.send({type:"ready"});const O=[];function J(){const e=O[y];y=(y+1)%O.length,e.send("request")}n.on("message",((e,t)=>{"ready"===e.type&&(O.push(t),O.length===l-1&&J())}))}else b.listen(d,p,(()=>{console.log(`Server is running on http://${p}:${d}`)}))}})();